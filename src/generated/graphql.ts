import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Answer = {
  __typename?: 'Answer';
  id: Scalars['ID'];
  questionId: Scalars['ID'];
  text: Scalars['String'];
};

export type ClientQuestionAnswer = {
  __typename?: 'ClientQuestionAnswer';
  answerId: Scalars['ID'];
  clientId?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
  questionId: Scalars['ID'];
  userId?: Maybe<Scalars['String']>;
};

export type ClientQuestionAnswerInput = {
  answerId: Scalars['ID'];
  clientId?: InputMaybe<Scalars['ID']>;
  questionId: Scalars['ID'];
};

export type Mutation = {
  __typename?: 'Mutation';
  saveAnswer?: Maybe<SaveAnswerPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationSaveAnswerArgs = {
  answers: Array<ClientQuestionAnswerInput>;
};

export type Query = {
  __typename?: 'Query';
  questions: Array<Question>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};

export type Question = {
  __typename?: 'Question';
  answers?: Maybe<Array<Answer>>;
  id: Scalars['ID'];
  max?: Scalars['String'];
  min?: Scalars['String'];
  questionType: Scalars['String'];
  text: Scalars['String'];
};

/** Autogenerated return type of SaveAnswer */
export type SaveAnswerPayload = {
  __typename?: 'SaveAnswerPayload';
  answers: Array<ClientQuestionAnswer>;
};

export type GetQuestionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetQuestionsQuery = { __typename?: 'Query', questions: Array<{ __typename?: 'Question', id: string, text: string, questionType: string, min: string, max: string, answers?: Array<{ __typename?: 'Answer', id: string, text: string }> | null }> };

export type SaveAnswersMutationVariables = Exact<{
  input: Array<ClientQuestionAnswerInput> | ClientQuestionAnswerInput;
}>;


export type SaveAnswersMutation = { __typename?: 'Mutation', saveAnswer?: { __typename?: 'SaveAnswerPayload', answers: Array<{ __typename?: 'ClientQuestionAnswer', id: string, userId?: string | null }> } | null };


export const GetQuestionsDocument = gql`
    query GetQuestions {
  questions {
    id
    text
    questionType
    min
    max
    answers {
      id
      text
    }
  }
}
    `;
export const SaveAnswersDocument = gql`
    mutation SaveAnswers($input: [ClientQuestionAnswerInput!]!) {
  saveAnswer(answers: $input) {
    answers {
      id
      userId
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    GetQuestions(variables?: GetQuestionsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<GetQuestionsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<GetQuestionsQuery>(GetQuestionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetQuestions', 'query');
    },
    SaveAnswers(variables: SaveAnswersMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<SaveAnswersMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<SaveAnswersMutation>(SaveAnswersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SaveAnswers', 'mutation');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;
